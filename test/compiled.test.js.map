{
  "version": 3,
  "sources": ["compiled.test.tsx"],
  "sourcesContent": ["import suite from '@prantlf/baretest'\nimport assert from 'assert'\nimport { Event } from './dom/dom-globals'\nimport { createEl, createRef } from '..'\n\nconst test = suite('compiled')\n\ntest('a static tag name', () => {\n  const el = <div></div>\n  assert.strictEqual(el.outerHTML, '<div></div>')\n})\n\ntest('a dynamic tag name', () => {\n  const Name = 'div'\n  const el = <Name />\n  assert.strictEqual(el.outerHTML, '<div></div>')\n})\n\ntest('an element factory', () => {\n  function HTMLDivElement() {\n    return <div></div>\n  }\n\n  const el = <HTMLDivElement />\n  assert.strictEqual(el.outerHTML, '<div></div>')\n})\n\ntest('a document fragment', () => {\n  const el = <><span></span><span></span></>\n  assert.strictEqual(el.outerHTML, '<span></span><span></span>')\n})\n\ntest('a template', () => {\n  const el = <template><hr /></template>\n  assert.strictEqual(el.outerHTML, '<template><hr></template>')\n})\n\ntest('an invalid type', () => {\n  const Invalid = true as unknown as Function\n  try {\n    <Invalid />\n    assert.fail('invalid type accepted')\n  } catch {\n    assert.ok(true)\n  }\n})\n\ntest('an attribute with a literal', () => {\n  const el = <div title=\"test\"></div>\n  assert.strictEqual(el.outerHTML, '<div title=\"test\"></div>')\n})\n\ntest('an attribute with a string value', () => {\n  const el = <div title={ 'test' }></div>\n  assert.strictEqual(el.outerHTML, '<div title=\"test\"></div>')\n})\n\ntest('an attribute with a number value', () => {\n  const el = <div tabindex={ 1 }></div>\n  assert.strictEqual(el.outerHTML, '<div tabindex=\"1\"></div>')\n})\n\ntest('an attribute with a true value', () => {\n  const el = <div disabled={ true }></div>\n  assert.strictEqual(el.outerHTML, '<div disabled=\"\"></div>')\n})\n\ntest('an attribute with a false value', () => {\n  const el = <div disabled={ false }></div>\n  assert.strictEqual(el.outerHTML, '<div></div>')\n})\n\ntest('an attribute without a true value', () => {\n  const el = <div disabled></div>\n  assert.strictEqual(el.outerHTML, '<div disabled=\"\"></div>')\n})\n\ntest('an attribute with an invalid value', () => {\n  try {\n    <div title={ Symbol('test') }></div>\n    assert.fail('invalid attribute accepted')\n  } catch {\n    assert.ok(true)\n  }\n})\n\ntest('a value attribute starting with \"on\"', () => {\n  const el = <div once=\"\"></div>\n  assert.strictEqual(el.outerHTML, '<div once=\"\"></div>')\n})\n\ntest('a value attribute called \"ref\"', () => {\n  const el = <div ref=\"true\"></div>\n  assert.strictEqual(el.outerHTML, '<div ref=\"true\"></div>')\n})\n\ntest('a style attribute as a string', () => {\n  const el = <div style=\"display: inline-block\"></div>\n  assert.strictEqual(el.outerHTML, '<div style=\"display: inline-block\"></div>')\n})\n\ntest('a style attribute as an object', () => {\n  const el = <div style={ { display: 'inline-block'} }></div>\n  assert.strictEqual(el.outerHTML, '<div style=\"display: inline-block\"></div>')\n})\n\ntest('attributes as an object', () => {\n  const attrs = { title: 'test' }\n  const el = <div { ...attrs }></div>\n  assert.strictEqual(el.outerHTML, '<div title=\"test\"></div>')\n})\n\ntest('an event attribute', () => {\n  const dispatched = new Event('click')\n  let received\n  const el = <div onclick={ event => received = event }></div>\n  assert.strictEqual(el.outerHTML, '<div></div>')\n  el.dispatchEvent(dispatched)\n  assert.strictEqual(received, dispatched)\n})\n\ntest('an event attribute with an upper-case letter', () => {\n  const dispatched = new Event('click')\n  let received\n  const el = <div onClick={ event => received = event }></div>\n  assert.strictEqual(el.outerHTML, '<div></div>')\n  el.dispatchEvent(dispatched)\n  assert.strictEqual(received, dispatched)\n})\n\ntest('an event attribute with use capture enabled', () => {\n  const dispatched = new Event('click')\n  const received = []\n  const el = <div\n    onClickCapture={ event => received.push({ captured: true, event }) }\n    onClick={ event => received.push({ triggered: true, event }) }\n  ></div>\n  assert.strictEqual(el.outerHTML, '<div></div>')\n  el.dispatchEvent(dispatched)\n  assert.strictEqual(received.length, 2)\n  assert.strictEqual(received[0].captured, true)\n  assert.strictEqual(received[0].event, dispatched)\n  assert.strictEqual(received[1].triggered, true)\n  assert.strictEqual(received[1].event, dispatched)\n})\n\ntest('an element reference with object', () => {\n  const ref = createRef()\n  const el = <div ref={ ref }></div>\n  assert.strictEqual(el.outerHTML, '<div></div>')\n  assert.strictEqual(ref.current, el)\n})\n\ntest('an element reference with function', () => {\n  let ref: HTMLElement\n  const el = <div ref={ (el: HTMLElement) => ref = el }></div>\n  assert.strictEqual(el.outerHTML, '<div></div>')\n  assert.strictEqual(ref, el)\n})\n\ntest('an element as a child', () => {\n  const el = <div><span></span></div>\n  assert.strictEqual(el.outerHTML, '<div><span></span></div>')\n})\n\ntest('two elements as children', () => {\n  const el = <div><span></span><hr /></div>\n  assert.strictEqual(el.outerHTML, '<div><span></span><hr></div>')\n})\n\ntest('two elements as an array', () => {\n  function Children() {\n    return [<span></span>, <hr />]\n  }\n\n  const el = <div><Children /></div>\n  assert.strictEqual(el.outerHTML, '<div><span></span><hr></div>')\n})\n\ntest('element as a child', () => {\n  function Repeat(props, ...children: any[]) {\n    const items = []\n    for (let i = 0, l = props.count; i < l; ++i) {\n      for (const child of children) items.push(child(i))\n    }\n    return <div>{ items }</div>\n  }\n\n  const el = <Repeat count={ 2 }>{ index => <span>{ index }</span> }</Repeat>\n  assert.strictEqual(el.outerHTML, '<div><span>0</span><span>1</span></div>')\n})\n\ntest('elements as children', () => {\n  function Item(props) {\n    return <li>{ props.message }</li>\n  }\n\n  const todos = ['start', 'finish']\n  const el = <ul>{ todos.map(message => <Item message={ message } />) }</ul>\n  assert.strictEqual(el.outerHTML, '<ul><li>start</li><li>finish</li></ul>')\n})\n\ntest('a property as a child', () => {\n  const title = 'test'\n  const el = <div>{ title }</div>\n  assert.strictEqual(el.outerHTML, '<div>test</div>')\n})\n\ntest('a literal as a child', () => {\n  const el = <div>test</div>\n  assert.strictEqual(el.outerHTML, '<div>test</div>')\n})\n\ntest('a string value as a child', () => {\n  const el = <div>{ 'test' }</div>\n  assert.strictEqual(el.outerHTML, '<div>test</div>')\n})\n\ntest('a true value as a child', () => {\n  const el = <div>{ true }</div>\n  assert.strictEqual(el.outerHTML, '<div></div>')\n})\n\ntest('a false value as a child', () => {\n  const el = <div>{ false }</div>\n  assert.strictEqual(el.outerHTML, '<div></div>')\n})\n\ntest('a null value as a child', () => {\n  const el = <div>{ null }</div>\n  assert.strictEqual(el.outerHTML, '<div></div>')\n})\n\ntest('an undefined value as a child', () => {\n  const el = <div>{ undefined }</div>\n  assert.strictEqual(el.outerHTML, '<div></div>')\n})\n\ntest('a number value as a child', () => {\n  const el = <div>{ 1 }</div>\n  assert.strictEqual(el.outerHTML, '<div>1</div>')\n})\n\nif (module === require.main) test.run()\nexport default test\n"],
  "mappings": "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",
  "names": []
}
